rules_version = '2';
service cloud.firestore {
    match /databases/{database}/documents {
        function isDefined(what) {
            return what != null;
        }

        function isTimestamp(what) {
            return isDefined(what) && what is timestamp;
        }

        function isString(what) {
            return isDefined(what) && what is string;
        }

        function isList(what) {
            return isDefined(what) && what is list;
        }

        function isMap(what) {
            return isDefined(what) && what is map;
        }

        function isLoggedIn() {
            return isDefined(request.auth);
        }

        function doesOwn(what) {
            return isDefined(what) && isLoggedIn() && request.auth.uid == what.id;
        }

        function isAuthorOf(what) {
            return isDefined(what) && isLoggedIn() && request.auth.uid == what.data.authorID;
        }

        function isMemberOf(what) {
            return isDefined(what) && isLoggedIn() && (!isDefined(what.data.members) || request.auth.uid in what.data.members);
        }

        function isAdminOf(what) {
            return isDefined(what) && isMemberOf(what) && request.auth.uid in what.data.admins;
        }

        function isValidMessageOrComment(mc) {
        return
            (isString(mc.authorID))
            && (isTimestamp(mc.createdOn))
            && (isString(mc.text_content));
        }

        match /chat_rooms/{chat_room} {
            function isValidChatRoom(cr) {
                return
                    (!isDefined(cr.members) || isList(cr.members));
            }

            function getChatRoomData() {
                return get (/databases/$(database)/documents/chat_rooms/$(chat_room)).data;
            }

            allow read: if isMemberOf(resource);
            allow create: if isAdminOf(request.resource) && isMemberOf(request.resource);
            allow update: if isAdminOf(resource) && isAdminOf(request.resource);
            allow delete: if isAdminOf(resource);

            match /messages/{document} {
                allow read: if isMemberOf(getChatRoomData());
                allow create: if isMemberOf(getChatRoomData()) && isValidMessageOrComment(request.resource);
                allow update: if isMemberOf(getChatRoomData()) && isAuthorOf(resource) && isAuthorOf(request.resource) && isValidMessageOrComment(request.resource);
                allow delete: if isAdminOf(getChatRoomData()) || isAuthorOf(resource);
            }
        }

        match /posts/{post} {
            function isValidPost(post) {
                return
                    (isString(post.authorID))
                    && (isTimestamp(post.createdOn))
                    && (!isDefined(post.media_url) || isString(post.media_url))
                    && (!isDefined(post.text_content) || isString(post.text_content))
                    && (isMap(post.reactions));
            }

            function getPostData() {
                return get(/databases/$(database)/documents/posts/$(post)).data;
            }

            allow read: if isLoggedIn();
            allow create: if isAuthorOf(request.resource) && isValidPost(request.resource);
            allow update: if isAuthorOf(resource) && isAuthorOf(request.resource) && isValidPost(request.resource);
            allow delete: if isAuthorOf(resource);

            match /comments/{comment} {
                allow read: if isLoggedIn();
                allow create: if isAuthorOf(request.resource) && isValidMessageOrComment(request.resource);
                allow update: if isAuthorOf(resource) && isAuthorOf(request.resource) && isValidMessageOrComment(request.resource);
                allow delete: if isAuthorOf(resource) || isAuthorOf(getPostData());
            }
        }

        match /users/{user} {
            function isValidUser(user) {
                return
                    (!isDefined(user.background_picture_url) || isString(user.background_picture_url))
                    && (!isDefined(user.birthday) || isTimestamp(user.birthday))
                    && (isString(user.displayName))
                    && (isList(hobbies))
                    && (isString(profile_picture_url));
            }

            allow read: if isLoggedIn();
            allow create: if doesOwn(request.resource) && isValidUser(request.resource.data);
            allow update: if doesOwn(resource) && doesOwn(request.resource) && isValidUser(request.resource.data);
        }
    }
}